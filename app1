// A C++ program to demonstrate
// STL sort() using
// our own comparator
#include <iostream>
#include<algorithm>
using namespace std;

// An interval has a start
// time and end time
struct Interval {
	int start, end, third;
};

// Compares two intervals
// according to starting times.
bool compareInterval(Interval i1, Interval i2)
{
	return (i1.start > i2.start);
}

bool compareInterval2(Interval i1, Interval i2)
{
	return (i1.end < i2.end);
}

bool compareInterval3(Interval i1, Interval i2)
{
	return (i1.third < i2.third);
}

int main()
{
	Interval arr[]
		= { { 12, 1 , 2 }, { 12, 2 ,2}, { 10, 2 ,1}, { 9, 1 ,1} };
	int n = sizeof(arr) / sizeof(arr[0]);

	// sort the intervals in increasing order of
	// start time

	sort(arr, arr + n, compareInterval);

	cout << "Intervals sorted by start time : \n";
	for (int i = 0; i < n; i++)
		cout << "[" << arr[i].start << "," << arr[i].end << "," << arr[i].third << "] ";






	int count = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i + 1].start == arr[i].start) {
			count++;
		}
		else if (arr[i + 1].start != arr[i].start && count != 0) {
			sort(arr + (i - (count)), arr + (i+1), compareInterval2);

			/////////////////

			int count2 = 0;
			for (int j = i - (count); j < i+1; j++) {
				if (arr[j + 1].end == arr[j].end) {
					count2++;
				}
				else if (arr[j + 1].end != arr[j].end && count2 != 0) {
					sort(arr + (j - (count2)), arr + (j + 1), compareInterval3);

					count2 = 0;
				}
			}

			//////////////////

			count = 0;
		}
	}

	cout << endl << endl;
	//sort(arr, arr + 2, compareInterval2);


	cout << "Intervals sorted by end time : \n";
	for (int i = 0; i < n; i++)
		cout << "[" << arr[i].start << "," << arr[i].end << "," << arr[i].third << "] ";



	

	cout << endl << endl;



	cout << "Intervals sorted by third time : \n";
	for (int i = 0; i < n; i++)
		cout << "[" << arr[i].start << "," << arr[i].end << "," << arr[i].third << "] ";

	return 0;
}








